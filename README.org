#+TITLE: AWS Certified AI Practitioner (AIF-C01) Exam Preparation
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh

* Introduction

This project provides comprehensive study materials, code examples, and a robust development environment for preparing for the AWS Certified AI Practitioner (AIF-C01) exam, announced in [[https://aws.amazon.com/blogs/training-and-certification/august-2024-new-offerings/][August 2024]]. While the primary focus is on the AIF-C01 exam, the project also lays groundwork for the AWS Certified Machine Learning Engineer â€“ Associate certification.

Key features of this project:
- Structured learning paths covering all AIF-C01 exam domains
- Hands-on code examples using AWS AI/ML services
- Local development environment with LocalStack for AWS service simulation
- Integration of Python and Clojure for a comprehensive learning experience
- Emphasis on best practices in AI/ML development and responsible AI

Whether you're an executive looking to understand AI/ML capabilities in AWS or a practitioner aiming for certification, this project provides the resources you need to succeed.

[[file:resources/test-image-640x.png]]

* Project Workflow


The following diagram illustrates the main workflow and available commands in this project:

#+BEGIN_SRC mermaid :file workflow.png :exports both
graph TD
    A[Start] --> B[make setup]
    B --> C[make deps]
    C --> D[make init]
    D --> E{Choose Environment}
    E -->|LocalStack| F[make switch-profile-lcl]
    E -->|AWS Dev| G[make switch-profile-dev]
    F --> H[make localstack-up]
    F --> I[make run]
    G --> I
    I --> J{Choose Action}
    J -->|Run Tests| K[make test]
    J -->|Lint Code| L[make lint]
    J -->|Fix Lint Issues| M[make lint-fix]
    J -->|Clean Project| N[make clean]
    J -->|Build Uberjar| O[make uberjar]
    J -->|Show Help| P[make help]
    J -->|Stop LocalStack| Q[make localstack-down]
    K --> J
    L --> J
    M --> J
    N --> J
    O --> J
    P --> J
    Q --> R[End]
#+END_SRC


* Architecture


#+BEGIN_SRC mermaid :file project_architecture.png
graph TD
    A[macOS] --> B[Shell Environment zsh]
    B --> C[direnv]
    C --> D[Poetry Environment]
    D --> E[Python Dependencies]
    D --> F[AWS CLI]
    D --> G[Leiningen]
    G --> H[Clojure Project]
    H --> I[Portal Data Viewer]
    H --> J[REPL with rebel-readline]
    B --> K[Docker]
    K --> L[LocalStack]
    L --> M[Simulated AWS Services]
    M --> M1[SageMaker]
    M --> M2[Bedrock]
    M --> M3[Comprehend]
    M --> M4[Kendra]
    M --> M5[Others...]
    B --> N[Squid Proxy]
    N --> O[HTTP/HTTPS Traffic]
    D --> Q[AWS Profiles]
    Q --> Q1[lcl Profile]
    Q --> Q2[dev Profile]
    Q2 --> R[Real AWS Services]

#+END_SRC

* Setup

1. Clone this repository
2. Run the setup script:

#+BEGIN_SRC shell
make setup
#+END_SRC

3. Install project dependencies:

#+BEGIN_SRC shell
make deps
#+END_SRC

4. Initialize the project:

#+BEGIN_SRC shell
make init
#+END_SRC

5. Choose your profile:

   For LocalStack:
#+BEGIN_SRC shell
make switch-profile-lcl
make localstack-up
#+END_SRC

   For AWS Dev:
#+BEGIN_SRC shell
make switch-profile-dev
#+END_SRC

* Usage

To start exploring the concepts:

1. Start the REPL:

#+BEGIN_SRC shell
make run
#+END_SRC

2. In the REPL, you can require and use the namespaces for each domain:

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d0-setup.environment :as d0])
(d0/check-environment)
#+END_SRC

* Example Usage for Each Domain


** Domain 0: Environment Setup and Connection Checks

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d0-setup.environment :as d0])
(d0/check-aws-credentials)
#+END_SRC

** Domain 1: Fundamentals of AI and ML

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d1-fundamentals.basics :as d1])
(d1/explain-ai-term :ml)
(d1/list-ml-types)
#+END_SRC

** Domain 2: Fundamentals of Generative AI

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d2-generative-ai.concepts :as d2])
(d2/explain-gen-ai-concept :prompt-engineering)
(d2/list-gen-ai-use-cases)
#+END_SRC

** Domain 3: Applications of Foundation Models

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d3-foundation-models.applications :as d3])
(d3/describe-rag)
(d3/list-model-selection-criteria)
#+END_SRC

** Domain 4: Guidelines for Responsible AI

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d4-responsible-ai.practices :as d4])
(d4/list-responsible-ai-features)
(d4/describe-bias-effects)
#+END_SRC

** Domain 5: Security, Compliance, and Governance for AI Solutions

#+BEGIN_SRC clojure :results output
(require '[aif-c01.d5-security-compliance.governance :as d5])
(d5/list-aws-security-services)
(d5/describe-data-governance-strategies)
#+END_SRC

* Development
:PROPERTIES:
:CUSTOM_ID: development-commands
:END:

This project uses a Makefile to manage common development tasks. To see all available commands and their descriptions, run:

#+BEGIN_SRC shell
make help
#+END_SRC

This will display a list of commands with inline descriptions, making it easy to understand and use the project's development workflow.

** LocalStack Usage
:PROPERTIES:
:CUSTOM_ID: localstack-usage
:END:

This project supports LocalStack for local development and testing. To use LocalStack:

1. Ensure Docker is installed and running on your system.
2. Switch to the LocalStack profile: =make switch-profile-lcl=
3. Start LocalStack: =make localstack-up=
4. Run the REPL: =make run=
5. When finished, stop LocalStack: =make localstack-down=

** Python Integration
:PROPERTIES:
:CUSTOM_ID: python-integration
:END:

This project uses Poetry for Python dependency management. The AWS CLI and other Python dependencies are installed within the project's virtual environment. To use Python or the AWS CLI:

1. Activate the Poetry shell: =poetry shell=
2. Run Python scripts or AWS CLI commands as needed

Example of using boto3 to interact with AWS services:

#+BEGIN_SRC python :results output
import boto3

def list_s3_buckets():
    s3 = boto3.client('s3')
    response = s3.list_buckets()
    return [bucket['Name'] for bucket in response['Buckets']]

print(list_s3_buckets())
#+END_SRC

** Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:

If you encounter issues:

1. Ensure your AWS credentials are correctly set up in =~/.aws/credentials= or environment variables.
2. For LocalStack issues, check that Docker is running and ports are not conflicting.
3. If REPL startup fails, try running =make deps= to ensure all dependencies are fetched.
4. For Python-related issues, ensure you're in the Poetry shell (=poetry shell=) before running commands.



* AWS Services Covered

This project includes examples and study materials for the following AWS services relevant to the AIF-C01 exam:

- Amazon SageMaker
- Amazon Comprehend
- Amazon Rekognition
- Amazon Kendra
- Amazon Bedrock
- Amazon Polly
- Amazon Transcribe
- Amazon Translate
- AWS Lambda
- Amazon S3
- Amazon CloudWatch
- Amazon Kinesis
- AWS Glue
- Amazon DynamoDB

Each service is explored in the context of AI/ML workflows and best practices.

** Amazon S3
Create a bucket and upload a file:

#+BEGIN_SRC shell
aws s3 mb s3://aif-c01
aws s3 cp resources/test-image.png s3://aif-c01
#+END_SRC

List contents of the bucket:

#+BEGIN_SRC shell
aws s3 ls s3://aif-c01
#+END_SRC

#+RESULTS:

For more S3 examples, refer to the [[file:/opt/homebrew/share/awscli/examples/s3/][S3 AWS CLI Examples]].

** Amazon Bedrock
List available foundation models:

#+BEGIN_SRC shell
aws bedrock list-foundation-models | jq -r '.modelSummaries[]|.modelId' | head
#+END_SRC

** Amazon Q Business
List applications:

#+BEGIN_SRC shell
aws qbusiness list-applications | jq .applications
#+END_SRC

** Amazon Comprehend
Detect sentiment in text:

#+BEGIN_SRC shell
aws comprehend detect-sentiment --text "I love using AWS services" --language-code en | jq -r .Sentiment
#+END_SRC

For more Comprehend examples, see the [[file:/opt/homebrew/share/awscli/examples/comprehend/][Comprehend AWS CLI Examples]].

** Amazon Translate
Translate text:

#+BEGIN_SRC shell
aws translate translate-text --text "Hello, world" --source-language-code en --target-language-code es | jq -r '.TranslatedText'
#+END_SRC

For more Translate examples, check the [[file:/opt/homebrew/share/awscli/examples/translate/][Translate AWS CLI Examples]].

** Amazon Transcribe
List transcription jobs:

#+BEGIN_SRC shell
aws transcribe list-transcription-jobs | jq -r '.TranscriptionJobSummaries[]|.TranscriptionJobName'
#+END_SRC

Start a new transcription job:

#+BEGIN_SRC shell
aws transcribe start-transcription-job --transcription-job-name "AIFC03TranscriptionJob$((RANDOM % 9000 + 1000))" --language-code en-US --media-format mp3 --media '{"MediaFileUri": "s3://aif-c01/test-audio.mp3"}' | jq
#+END_SRC

For more Transcribe examples, refer to the [[file:/opt/homebrew/share/awscli/examples/transcribe/][Transcribe AWS CLI Examples]].

** Amazon Polly
Start a speech synthesis task:

#+BEGIN_SRC shell
aws polly start-speech-synthesis-task --output-format mp3 --output-s3-bucket-name aif-c01 --text "Hello, welcome to AWS AI services" --voice-id Joanna
#+END_SRC

List speech synthesis tasks and check the output in S3:

#+BEGIN_SRC shell
aws polly list-speech-synthesis-tasks | jq .SynthesisTasks
aws s3 ls aif-c01
#+END_SRC

For more Polly examples, see the [[file:/opt/homebrew/share/awscli/examples/polly/][Polly AWS CLI Examples]].

** Amazon Rekognition
Detect labels in an image:

#+BEGIN_SRC shell
aws rekognition detect-labels \
    --image '{"S3Object":{"Bucket":"aif-c01","Name":"test-image.png"}}' \
    --max-labels 10 \
    --region us-east-1 \
    --output json | jq -r '.Labels[]|.Name'
#+END_SRC

For more Rekognition examples, check the [[file:/opt/homebrew/share/awscli/examples/rekognition/][Rekognition AWS CLI Examples]].

** Amazon Kendra
List Kendra indices:

#+BEGIN_SRC shell
aws kendra list-indices | jq .IndexConfigurationSummaryItems
#+END_SRC

For more Kendra examples, see the [[file:/opt/homebrew/share/awscli/examples/kendra/][Kendra AWS CLI Examples]].

** Amazon SageMaker
List notebook instances:

#+BEGIN_SRC shell
aws sagemaker list-notebook-instances | jq -r '.NotebookInstances[]|.NotebookInstanceName'
#+END_SRC

List SageMaker pipelines:

#+BEGIN_SRC shell
aws sagemaker list-pipelines | jq .PipelineSummaries
#+END_SRC

List SageMaker models:

#+BEGIN_SRC shell
aws sagemaker list-models | jq .Models
#+END_SRC

For more SageMaker examples, refer to the [[file:/opt/homebrew/share/awscli/examples/sagemaker/][SageMaker AWS CLI Examples]].

** AWS Lambda
List Lambda functions:

#+BEGIN_SRC shell
aws lambda list-functions | jq -r '.Functions[]|.FunctionName'
#+END_SRC

List Lambda functions with "ML" or "AI" in the name:

#+BEGIN_SRC shell
aws lambda list-functions | jq '.Functions[] | select(.FunctionName | test("ML|AI"))'
#+END_SRC

For more Lambda examples, check the [[file:/opt/homebrew/share/awscli/examples/lambda/][Lambda AWS CLI Examples]].

** Amazon CloudWatch
List metrics for SageMaker:

#+BEGIN_SRC shell
aws cloudwatch list-metrics --namespace "AWS/SageMaker" | jq .Metrics
#+END_SRC

For more CloudWatch examples, see the [[file:/opt/homebrew/share/awscli/examples/cloudwatch/][CloudWatch AWS CLI Examples]].

** Amazon Kinesis
List Kinesis streams:

#+BEGIN_SRC shell
aws kinesis list-streams | jq .StreamNames
#+END_SRC

For more Kinesis examples, refer to the [[file:/opt/homebrew/share/awscli/examples/kinesis/][Kinesis AWS CLI Examples]].

** AWS Glue
List Glue databases:

#+BEGIN_SRC shell
aws glue get-databases | jq .DatabaseList
#+END_SRC

For more Glue examples, check the [[file:/opt/homebrew/share/awscli/examples/glue/][Glue AWS CLI Examples]].

** Amazon DynamoDB
List DynamoDB tables:

#+BEGIN_SRC shell
aws dynamodb list-tables | jq -r '.TableNames[]'
#+END_SRC

For more DynamoDB examples, see the [[file:/opt/homebrew/share/awscli/examples/dynamodb/][DynamoDB AWS CLI Examples]].

** Amazon Forecast
List Forecast datasets:

#+BEGIN_SRC shell
aws forecast list-datasets | jq .Datasets
#+END_SRC

** Amazon Lex
List Lex bots:

#+BEGIN_SRC shell
aws lexv2-models list-bots | jq .botSummaries
#+END_SRC

** Amazon Personalize
List Personalize datasets:

#+BEGIN_SRC shell
aws personalize list-datasets | jq .datasets
#+END_SRC

** Amazon Textract
Analyze a document (replace `YOUR_BUCKET_NAME` and `YOUR_DOCUMENT_NAME` with actual values):

#+BEGIN_SRC shell
aws textract analyze-document --document '{"S3Object":{"Bucket":"YOUR_BUCKET_NAME","Name":"YOUR_DOCUMENT_NAME"}}' --feature-types "TABLES" "FORMS"
#+END_SRC

** Amazon Comprehend Medical
Detect entities in medical text:

#+BEGIN_SRC shell
aws comprehendmedical detect-entities --text "The patient was prescribed 500mg of acetaminophen for fever."
#+END_SRC

** AWS Security Services for AI/ML
List IAM roles with "SageMaker" in the name:

#+BEGIN_SRC shell
aws iam list-roles | jq '.Roles[] | select(.RoleName | contains("SageMaker"))'
#+END_SRC

Describe EC2 instances with GPU (useful for ML workloads):

#+BEGIN_SRC shell
aws ec2 describe-instances --filters "Name=instance-type,Values=p*,g*" | jq .Reservations[].Instances[]
#+END_SRC
* Responsible AI

A key focus of this project is on responsible AI practices. We cover:

- Ethical considerations in AI/ML development
- Bias detection and mitigation strategies
- Fairness and inclusivity in AI systems
- Robustness and safety measures
- Compliance and governance in AI projects

* Study Resources

In addition to code examples, this project includes:

- Curated lists of AWS documentation and whitepapers
- Links to relevant AWS training materials
- Practice questions for each exam domain
- Glossary of key AI/ML terms in the context of AWS

* License
:PROPERTIES:
:CUSTOM_ID: license
:END:

This project is licensed under the MIT License - see the [[file:LICENSE][LICENSE]] file for details.


* Disclaimer

This project is not affiliated with or endorsed by Amazon Web Services. All AWS service names and trademarks are property of Amazon.com, Inc. or its affiliates.
